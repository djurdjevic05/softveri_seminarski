
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme.clan;

import domen.Administrator;
import domen.Clan;
import domen.Mesto;
import forme.FGlavna;
import forme.mesto.FSelektovanjeMesta;
import forme.FormMode;
import java.awt.Color;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import kontroler.Kontroler;
import transfer.ServerskiOdgovor;
import validacija.FormValidator;

/**
 *
 * @author USER
 */
public class FClan extends javax.swing.JDialog {

    Border defaultBorder;

    private FClan(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        srediFormu();
        defaultBorder = txtImeClana.getBorder();
        FormValidator.getInstance().setDefaultBorder(defaultBorder);
        
    }

    public FClan(FGlavna parent, boolean modal, FormMode rezim) {
        this(parent, modal);
        prilagodiFormu(rezim);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupPol = new javax.swing.ButtonGroup();
        lblUsername = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        lblPonoviPassword = new javax.swing.JLabel();
        txtPonoviPassword = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        txtPasswordCheck = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtClanID = new javax.swing.JTextField();
        cmbMesto = new javax.swing.JComboBox();
        lblImeClana = new javax.swing.JLabel();
        txtImeClana = new javax.swing.JTextField();
        lblPrezimeClana = new javax.swing.JLabel();
        txtPrezime = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtJMBG = new javax.swing.JTextField();
        rbtnM = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        rbtnZ = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtCurrentUser = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtDatumRodjenja = new javax.swing.JTextField();
        btnSelektujMesto = new javax.swing.JButton();
        btnPonisti = new javax.swing.JButton();
        btnAzuriraj = new javax.swing.JButton();
        btnIzmeni = new javax.swing.JButton();
        btnSacuvaj = new javax.swing.JButton();
        lblAdresa = new javax.swing.JLabel();
        txtAdresa = new javax.swing.JTextField();
        lblPolError = new javax.swing.JLabel();
        lblDatumError = new javax.swing.JLabel();
        lblJMBGError = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblUsername.setText("Username: ");

        lblPassword.setText("Password: ");

        txtPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPasswordKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPasswordKeyReleased(evt);
            }
        });

        lblPonoviPassword.setText("Ponovi password:");

        txtPonoviPassword.setName(""); // NOI18N
        txtPonoviPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPonoviPasswordKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPonoviPasswordKeyReleased(evt);
            }
        });

        jLabel2.setText("ID clana: ");

        txtPasswordCheck.setEditable(false);

        jLabel11.setText("Mesto: ");

        txtClanID.setEditable(false);

        cmbMesto.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbMesto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMestoItemStateChanged(evt);
            }
        });

        lblImeClana.setText("Ime clana: ");

        lblPrezimeClana.setText("Prezime clana: ");

        jLabel5.setText("JMBG:");

        buttonGroupPol.add(rbtnM);
        rbtnM.setText("M");

        jLabel6.setText("Pol: ");

        buttonGroupPol.add(rbtnZ);
        rbtnZ.setText("Z");

        jLabel1.setText("Trenutni korisnik:");

        txtCurrentUser.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtCurrentUser, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtCurrentUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jLabel7.setText("Datum rodjenja: ");

        btnSelektujMesto.setText("Selektuj mesto");
        btnSelektujMesto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelektujMestoActionPerformed(evt);
            }
        });

        btnPonisti.setText("Ponisti");
        btnPonisti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPonistiActionPerformed(evt);
            }
        });

        btnAzuriraj.setText("Azuriraj");
        btnAzuriraj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAzurirajActionPerformed(evt);
            }
        });

        btnIzmeni.setText("Izmeni");
        btnIzmeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniActionPerformed(evt);
            }
        });

        btnSacuvaj.setText("Sacuvaj");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        lblAdresa.setText("Adresa: ");

        lblPolError.setForeground(new java.awt.Color(255, 0, 0));

        lblDatumError.setForeground(new java.awt.Color(255, 0, 0));

        lblJMBGError.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(lblPolError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(lblImeClana)
                                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(lblPrezimeClana, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(txtImeClana, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                                        .addComponent(txtPrezime, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                                        .addComponent(txtJMBG)))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(rbtnM)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(rbtnZ)))
                                            .addGap(10, 10, 10)))
                                    .addComponent(lblJMBGError, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(59, 59, 59)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(0, 0, Short.MAX_VALUE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtDatumRodjenja, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(lblDatumError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblPonoviPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(cmbMesto, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnSelektujMesto, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtPonoviPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtPasswordCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblAdresa)
                                .addGap(18, 18, 18)
                                .addComponent(txtAdresa, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(231, 231, 231)
                                .addComponent(btnPonisti, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnAzuriraj, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnIzmeni, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSacuvaj, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(132, 132, 132)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtClanID, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(4, 4, 4))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtClanID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblImeClana)
                    .addComponent(txtImeClana, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtDatumRodjenja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDatumError, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPrezimeClana)
                    .addComponent(txtPrezime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUsername)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtJMBG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPassword)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPonoviPassword)
                            .addComponent(txtPonoviPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPasswordCheck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(cmbMesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSelektujMesto)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblJMBGError, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbtnM)
                            .addComponent(rbtnZ)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblPolError, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtAdresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAdresa))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPonisti)
                    .addComponent(btnAzuriraj)
                    .addComponent(btnIzmeni)
                    .addComponent(btnSacuvaj))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPonistiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPonistiActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnPonistiActionPerformed

    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed
        postaviBorder();

        lblDatumError.setText("");

        String ime = txtImeClana.getText().trim();
        String prezime = txtPrezime.getText().trim();
        String jmbg = txtJMBG.getText().trim();
        String adresa = txtAdresa.getText();

        String username = txtUsername.getText().trim();
        String password = new String(txtPassword.getPassword());

        String datumRodjenja = txtDatumRodjenja.getText().trim();
        //SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");

        try {
            boolean prekini = validacijaFormeZaCuvanje();
            boolean validniButtonGroup = FormValidator.getInstance().validateButtonGroupSelection(buttonGroupPol);
            boolean validniComboBox = FormValidator.getInstance().validateComboSelection(cmbMesto);
            boolean validniTextField = FormValidator.getInstance().validateEmpty(txtAdresa, txtDatumRodjenja, txtImeClana, txtJMBG, txtPassword, txtPonoviPassword, txtPrezime, txtUsername);
            if (!validniTextField || !validniComboBox || !validniButtonGroup) {
                JOptionPane.showMessageDialog(this, "Clan nije sacuvan! "+FormValidator.getInstance().getValidationMessage(),"Neuspesno cuvanje",JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (prekini) {
                return;
            }
            Mesto m = (Mesto) cmbMesto.getSelectedItem();
            Date d = formatiranDatum(datumRodjenja);
            String pol = buttonGroupPol.getSelection().getActionCommand();
            jmbgIDatumRodjenjaProvera(jmbg, d);

            Clan c = new Clan(ime, prezime, jmbg, pol, adresa, d, username, password, m);
            ServerskiOdgovor so = Kontroler.getInstance().unesiClana(c);

            
            if (!so.isUspesno()) {
                JOptionPane.showMessageDialog(this, so.getPoruka(),"Neuspesno cuvanje clana!", JOptionPane.ERROR_MESSAGE);
                return;
            }
            JOptionPane.showMessageDialog(this, so.getPoruka(), "Unos clana!", JOptionPane.INFORMATION_MESSAGE);
            c = (Clan) so.getOdgovor();
            Kontroler.getInstance().getMapa().put("sacuvan_clan", c);

            int result = JOptionPane.showConfirmDialog(this, "Novi clan?", "Pitanje", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                prikazClana(new Clan());
                ukloniOsluskivaceZaNovUnos();
                podesiProveruPasswordaZaNovUnos();
                srediPoljeZaPonavljanjePassworda();
            } else {
                dispose();
            }

        } catch (ParseException ex) {
            //JOptionPane.showMessageDialog(this, "Morate uneti datum u formatu dd.MM.yyyy", "Greska U PARSIRANJU!", JOptionPane.ERROR_MESSAGE);
            lblDatumError.setText("Format datuma: dd.MM.yyyy");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Clan nije sacuvan!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSacuvajActionPerformed
    private Date formatiranDatum(String d) throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
        Date datum = sdf.parse(d);
        return datum;
    }
    private void txtPonoviPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPonoviPasswordKeyPressed
        String typedPass = new String(txtPonoviPassword.getPassword());

    }//GEN-LAST:event_txtPonoviPasswordKeyPressed

    private void txtPonoviPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPonoviPasswordKeyReleased
        validacijaPassworda();

        if (String.valueOf(txtPonoviPassword.getPassword()).isEmpty()) {
            btnSacuvaj.setEnabled(true);
        }
    }//GEN-LAST:event_txtPonoviPasswordKeyReleased

    private void txtPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPasswordKeyPressed
        String originalPass = new String(txtPassword.getPassword());
        txtPonoviPassword.setEditable(true);

    }//GEN-LAST:event_txtPasswordKeyPressed

    private void txtPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPasswordKeyReleased
        if (!(String.valueOf(txtPonoviPassword.getPassword())).isEmpty()) {
            validacijaPassworda();
        }
        if (String.valueOf(txtPassword.getPassword()).isEmpty()) {
            txtPonoviPassword.setText("");
        }
    }//GEN-LAST:event_txtPasswordKeyReleased

    private void btnSelektujMestoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelektujMestoActionPerformed
        new FSelektovanjeMesta(null, true).setVisible(true);
        Mesto mesto = (Mesto) Kontroler.getInstance().getMapa().get("izabrano_mesto");
        cmbMesto.setSelectedItem(mesto);
    }//GEN-LAST:event_btnSelektujMestoActionPerformed

    private void btnIzmeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniActionPerformed
        prilagodiFormu(FormMode.EDIT);
    }//GEN-LAST:event_btnIzmeniActionPerformed

    private void btnAzurirajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAzurirajActionPerformed
        postaviBorder();
        int id = Integer.parseInt(txtClanID.getText().trim());
        String ime = txtImeClana.getText();
        String prezime = txtPrezime.getText();
        String jmbg = txtJMBG.getText();
        String adresa = txtAdresa.getText();
        String datumString = txtDatumRodjenja.getText().trim();
        String username = txtUsername.getText().trim();
        String password = new String(txtPassword.getPassword());

        try {
            boolean prekini = validacijaFormeZaCuvanje();
            boolean validniButtonGroup = FormValidator.getInstance().validateButtonGroupSelection(buttonGroupPol);
            boolean validniComboBox = FormValidator.getInstance().validateComboSelection(cmbMesto);
            boolean validniTextField = FormValidator.getInstance().validateEmpty(txtAdresa, txtDatumRodjenja, txtImeClana, txtJMBG, txtPassword, txtPonoviPassword, txtPrezime, txtUsername);
            if (!validniTextField || !validniComboBox || !validniButtonGroup) {
                JOptionPane.showMessageDialog(this, FormValidator.getInstance().getValidationMessage());
                return;
            }
            if (prekini) {
                return;
            }

            Date d = formatiranDatum(datumString);
            String pol = buttonGroupPol.getSelection().getActionCommand();
            jmbgIDatumRodjenjaProvera(jmbg, d);
            Mesto m = (Mesto) cmbMesto.getSelectedItem();

            Clan c = new Clan(id, ime, prezime, jmbg, pol, adresa, d, username, password, m);
            ServerskiOdgovor so = Kontroler.getInstance().izmeniClana(c);
            if(!so.isUspesno()){
                JOptionPane.showMessageDialog(this, so.getPoruka(), "Greska", JOptionPane.ERROR_MESSAGE);
                return;
            }
            JOptionPane.showMessageDialog(this, so.getPoruka(), "Azuriranje clana", JOptionPane.INFORMATION_MESSAGE);
            dispose();

        } catch (ParseException ex) {
            lblDatumError.setText("Format datuma: dd.MM.yyyy");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Clan nije azuriran!", JOptionPane.ERROR_MESSAGE);
            dispose();
        }


    }//GEN-LAST:event_btnAzurirajActionPerformed

    private void cmbMestoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMestoItemStateChanged
        if (cmbMesto.getSelectedItem() == null) {
            btnSacuvaj.setEnabled(false);
        } else {
            btnSacuvaj.setEnabled(true);
        }
    }//GEN-LAST:event_cmbMestoItemStateChanged
    private void postaviKorisnika() {
        Administrator a = (Administrator) Kontroler.getInstance().getMapa().get("admin");
        txtCurrentUser.setText(a.toString());
    }

    private void srediPoljeZaPonavljanjePassworda() {
        txtPonoviPassword.setEditable(false);
    }

    private void srediFormu() {
        setLocationRelativeTo(null);
        srediButtoneZaPol();
        postaviKorisnika();
        popuniKomboMesta();
        srediPoljeZaPonavljanjePassworda();
        
    }

    private void jmbgIDatumRodjenjaProvera(String jmbg, Date d) throws Exception {
        Calendar c = Calendar.getInstance();
        c.setTime(d);
        String subset = jmbg.substring(0, 7);
        int danRodjenja = c.get(Calendar.DAY_OF_MONTH);
        int mesecRodjenja = c.get(Calendar.MONTH);
        int godinaRodjenja = c.get(Calendar.YEAR);

        int godinaJMBG = Integer.parseInt(subset.substring(4));
        int mesecJMBG = Integer.parseInt(subset.substring(2, 4));
        int danJMBG = Integer.parseInt(subset.substring(0, 2));

        if (svediNaTrocifrenuGodinu(godinaRodjenja) != godinaJMBG) {
            throw new Exception("Godina u datumu rodjenja i JMBG-u se NE poklapa!!");
        }
        if (mesecRodjenja + 1 != mesecJMBG) {
            throw new Exception("Mesec u datumu rodjenja i JMBG-u se NE poklapa!!");
        }
        if (danRodjenja != danJMBG) {
            throw new Exception("Dan rodjenja u datumu rodjenja i JMBG-u se NE poklapa!!");
        }

    }

    private boolean validacijaFormeZaCuvanje() throws Exception {
        lblJMBGError.setText("");
        lblPolError.setText("");

        boolean izmenjeno = false;

        if ((txtJMBG.getText()).length() < 13) {
            lblJMBGError.setText("JMBG mora imati 13 cifara!");
            izmenjeno = true;
        }

        return izmenjeno;
    }

    private int svediNaTrocifrenuGodinu(int godina) {
        int i = 10;

        int[] niz = new int[3];
        int pozicijaZaUbacivanje = niz.length - 1;
        while (godina != 0 && pozicijaZaUbacivanje >= 0) {
            niz[pozicijaZaUbacivanje] = godina % i;
            pozicijaZaUbacivanje--;
            godina /= 10;
        }
        int j = 1;
        int broj = 0;
        for (int k = niz.length - 1; k >= 0; k--) {
            broj += niz[k] * j;
            j *= 10;
        }
        return broj;
    }

    private void popuniKomboMesta() {
        List<Mesto> lista = Kontroler.getInstance().vratiListuMesta(new Mesto("", ""));
        cmbMesto.setModel(new DefaultComboBoxModel(lista.toArray()));

    }

    private void srediButtoneZaPol() {
        rbtnM.setActionCommand("M");
        rbtnZ.setActionCommand("Z");
    }

    private void validacijaPassworda() {
        txtPasswordCheck.setText("");

        if (!(String.valueOf(txtPassword.getPassword())).isEmpty() && !(String.valueOf(txtPonoviPassword.getPassword())).isEmpty()) {
            if (!String.valueOf(txtPonoviPassword.getPassword()).equals(String.valueOf(txtPassword.getPassword()))) {
                txtPasswordCheck.setForeground(Color.red);
                txtPasswordCheck.setText("Sifre se NE poklapaju!");
                btnSacuvaj.setEnabled(false);// OBRATI PAZNJU OVDE!!!
            } else {
                txtPasswordCheck.setForeground(Color.green);
                txtPasswordCheck.setText("Sifre se poklapaju!");
                btnSacuvaj.setEnabled(true);
            }
        }
    }

    private void prilagodiFormu(FormMode rezim) {
        switch (rezim) {
            case NEW:
                setTitle("Novi clan");
                jLabel2.setVisible(false);
                txtClanID.setVisible(false);
                btnAzuriraj.setVisible(false);
                btnSelektujMesto.setVisible(true);
                btnIzmeni.setVisible(false);
                //cmbMesto.setEditable(true);
                //rbtnM.setEnabled(true);
                //rbtnZ.setEnabled(true);

                break;

            case EDIT:
                setTitle("Izmena clana");
                jLabel2.setVisible(true);
                txtClanID.setVisible(true);

                btnSacuvaj.setVisible(false);
                btnSelektujMesto.setVisible(true);
                btnAzuriraj.setVisible(true);
                btnIzmeni.setVisible(false);

                txtImeClana.setEditable(true);
                txtPrezime.setEditable(true);
                txtJMBG.setEditable(true);
                txtAdresa.setEditable(true);
                txtDatumRodjenja.setEditable(true);
                txtUsername.setEditable(true);
                txtPassword.setEditable(true);

                lblPonoviPassword.setVisible(true);
                txtPonoviPassword.setVisible(true);
                txtPasswordCheck.setVisible(true);

                cmbMesto.setEnabled(true);
                rbtnM.setEnabled(true);
                rbtnZ.setEnabled(true);

                break;

            case VIEW:
                setTitle("Prikaz clana");
                jLabel2.setVisible(true);
                txtClanID.setVisible(true);

                btnAzuriraj.setVisible(false);
                btnSacuvaj.setVisible(false);
                btnSelektujMesto.setVisible(false);
                btnIzmeni.setVisible(true);

                txtImeClana.setEditable(false);
                txtPrezime.setEditable(false);
                txtJMBG.setEditable(false);
                txtAdresa.setEditable(false);
                txtDatumRodjenja.setEditable(false);
                txtUsername.setEditable(false);
                txtPassword.setEditable(false);

                lblPonoviPassword.setVisible(false);
                txtPonoviPassword.setVisible(false);
                txtPasswordCheck.setVisible(false);
                postaviClana();

                cmbMesto.setEnabled(false);
                rbtnM.setEnabled(false);
                rbtnZ.setEnabled(false);

                break;
        }
    }

    private void prikazClana(Clan c) throws Exception {
        System.out.println("Pol: " + c.getPol());
        txtClanID.setText(String.valueOf(c.getClanID()));
        txtImeClana.setText(c.getIme());
        txtPrezime.setText(c.getPrezime());
        txtJMBG.setText(c.getJmbg());

        if (c.getPol() == null) {
            buttonGroupPol.clearSelection();
        } else if (c.getPol().equals("M")) {
            rbtnM.setSelected(true);
        } else {
            rbtnZ.setSelected(true);
        }

        txtAdresa.setText(c.getAdresa());

        if (c.getDatumRodjenja() != null) {
            Date d = c.getDatumRodjenja();
            SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
            String datum = sdf.format(d);
            txtDatumRodjenja.setText(datum);
        } else {
            txtDatumRodjenja.setText("");
        }

        txtUsername.setText(c.getUsername());
        txtPassword.setText(c.getPassword());
        txtPonoviPassword.setText(c.getPassword());
        if (c.getPassword() == null) {
            txtPasswordCheck.setText("");
        }

        cmbMesto.setSelectedItem(c.getMesto() == null ? null : c.getMesto());

    }

    private void postaviClana() {
        Clan c = (Clan) Kontroler.getInstance().getMapa().get("izabrani_clan");
        try {
            prikazClana(c);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAzuriraj;
    private javax.swing.JButton btnIzmeni;
    private javax.swing.JButton btnPonisti;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JButton btnSelektujMesto;
    private javax.swing.ButtonGroup buttonGroupPol;
    private javax.swing.JComboBox cmbMesto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblAdresa;
    private javax.swing.JLabel lblDatumError;
    private javax.swing.JLabel lblImeClana;
    private javax.swing.JLabel lblJMBGError;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPolError;
    private javax.swing.JLabel lblPonoviPassword;
    private javax.swing.JLabel lblPrezimeClana;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JRadioButton rbtnM;
    private javax.swing.JRadioButton rbtnZ;
    private javax.swing.JTextField txtAdresa;
    private javax.swing.JTextField txtClanID;
    private javax.swing.JTextField txtCurrentUser;
    private javax.swing.JTextField txtDatumRodjenja;
    private javax.swing.JTextField txtImeClana;
    private javax.swing.JTextField txtJMBG;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtPasswordCheck;
    private javax.swing.JPasswordField txtPonoviPassword;
    private javax.swing.JTextField txtPrezime;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
    private List<JTextField> tekstPolja() {
        List<JTextField> polja = new ArrayList() {
            {
                add(txtAdresa);
                add(txtImeClana);
                add(txtUsername);
                add(txtPrezime);
                add(txtPassword);
                add(txtPonoviPassword);
                add(txtDatumRodjenja);
                add(txtJMBG);
            }
        };
        return polja;

    }

    private void postaviBorder() {
        for (JTextField p : tekstPolja()) {
            p.setBorder(defaultBorder);
        }
    }

    private void ukloniOsluskivaceZaNovUnos() {
        List<JTextField> tekstPolja = tekstPolja();
        for (JTextField jtf : tekstPolja) {
            for (KeyListener k1 : jtf.getKeyListeners()) {
                if (k1 instanceof KeyAdapter) {
                    jtf.removeKeyListener(k1);
                }
            }
        }
    }

    private void podesiProveruPasswordaZaNovUnos() {
        txtPassword.addKeyListener(new KeyAdapter() {

            @Override
            public void keyPressed(KeyEvent e) {
                String originalPass = new String(txtPassword.getPassword());
                txtPonoviPassword.setEditable(true);
            }

            @Override
            public void keyReleased(KeyEvent e) {
                if (!(String.valueOf(txtPonoviPassword.getPassword())).isEmpty()) {
                    validacijaPassworda();
                }
                if (String.valueOf(txtPassword.getPassword()).isEmpty()) {
                    txtPonoviPassword.setText("");
                }
            }

        });
        txtPonoviPassword.addKeyListener(new KeyAdapter() {

            @Override
            public void keyPressed(KeyEvent e) {
                String typedPass = new String(txtPonoviPassword.getPassword());
            }

            @Override
            public void keyReleased(KeyEvent e) {
                validacijaPassworda();

                if (String.valueOf(txtPonoviPassword.getPassword()).isEmpty()) {
                    btnSacuvaj.setEnabled(true);
                }
            }

        });

    }

}
